{"version":3,"file":"main-D40S36mr.js","sources":["../../src/core/GameState.js","../../src/main.js"],"sourcesContent":["// Game State Management System\nexport class GameState {\n  constructor() {\n    this.currentChapter = 1;\n    this.playerProgress = {\n      completedChapters: [],\n      currentLocation: 'start',\n      inventory: [],\n      health: 100,\n      faith: 50,\n    };\n    this.gameSettings = {\n      audioEnabled: true,\n      musicVolume: 0.7,\n      sfxVolume: 0.8,\n      accessibilityMode: false,\n    };\n    this.isPaused = false;\n    this.isLoading = false;\n  }\n\n  // Chapter management\n  getCurrentChapter() {\n    return this.currentChapter;\n  }\n\n  setCurrentChapter(chapter) {\n    this.currentChapter = chapter;\n    this.saveProgress();\n  }\n\n  // Progress tracking\n  completeChapter(chapter) {\n    if (!this.playerProgress.completedChapters.includes(chapter)) {\n      this.playerProgress.completedChapters.push(chapter);\n      this.saveProgress();\n    }\n  }\n\n  // Save/Load functionality\n  saveProgress() {\n    try {\n      localStorage.setItem(\n        'gospel-game-progress',\n        JSON.stringify({\n          currentChapter: this.currentChapter,\n          playerProgress: this.playerProgress,\n          gameSettings: this.gameSettings,\n        }),\n      );\n      console.log('💾 Game progress saved');\n    } catch (error) {\n      console.error('Failed to save progress:', error);\n    }\n  }\n\n  loadProgress() {\n    try {\n      const saved = localStorage.getItem('gospel-game-progress');\n      if (saved) {\n        const data = JSON.parse(saved);\n\n        // Handle missing properties gracefully\n        if (data.currentChapter !== undefined && data.currentChapter !== null) {\n          this.currentChapter = data.currentChapter;\n        }\n\n        if (data.playerProgress && data.playerProgress !== null) {\n          this.playerProgress = {\n            ...this.playerProgress,\n            ...data.playerProgress,\n            completedChapters: data.playerProgress.completedChapters || [],\n          };\n        }\n\n        if (data.gameSettings && data.gameSettings !== null) {\n          this.gameSettings = {\n            ...this.gameSettings,\n            ...data.gameSettings,\n          };\n        }\n\n        console.log('📂 Game progress loaded');\n        return true;\n      }\n    } catch (error) {\n      console.error('Failed to load progress:', error);\n    }\n    return false;\n  }\n\n  // Settings management\n  updateSettings(newSettings) {\n    this.gameSettings = { ...this.gameSettings, ...newSettings };\n    this.saveProgress();\n  }\n\n  // Game state control\n  pause() {\n    this.isPaused = true;\n  }\n\n  resume() {\n    this.isPaused = false;\n  }\n\n  // Utility methods\n  resetProgress() {\n    this.currentChapter = 1;\n    this.playerProgress = {\n      completedChapters: [],\n      currentLocation: 'start',\n      inventory: [],\n      health: 100,\n      faith: 50,\n    };\n    localStorage.removeItem('gospel-game-progress');\n    console.log('🔄 Game progress reset');\n  }\n\n  getProgressPercentage() {\n    const totalChapters = 14; // Based on the story structure\n    return Math.round((this.playerProgress.completedChapters.length / totalChapters) * 100);\n  }\n}\n\n// Singleton instance\nexport const gameState = new GameState();\n","// Main entry point for the Gospel Game\nimport './styles/main.css';\nimport { gameState } from './core/GameState.js';\n\n// This was a deliberate linting error - now fixed\n// const badVariable = 'this should fail';;\n\nclass GameLoader {\n  constructor() {\n    this.loadingScreen = document.getElementById('loading-screen');\n    this.gameContainer = document.getElementById('game-container');\n    this.isLoaded = false;\n  }\n\n  async init() {\n    console.log(\"🎮 Gospel Game - The Pilgrim's Progress\");\n    console.log('🚀 Initializing game...');\n\n    try {\n      // Simulate loading time for assets\n      await this.simulateLoading();\n\n      // Initialize game components\n      await this.initializeGame();\n\n      // Hide loading screen and show game\n      this.showGame();\n\n      console.log('✅ Game initialized successfully!');\n    } catch (error) {\n      console.error('❌ Failed to initialize game:', error);\n      this.showError('Failed to load game. Please refresh the page.');\n    }\n  }\n\n  async simulateLoading() {\n    // Simulate loading time (remove this in production)\n    return new Promise(resolve => {\n      setTimeout(resolve, 2000);\n    });\n  }\n\n  async initializeGame() {\n    // Initialize game systems\n    console.log('🎯 Initializing game systems...');\n\n    // Load saved progress\n    const hasProgress = gameState.loadProgress();\n    if (hasProgress) {\n      console.log(`📂 Loaded progress: Chapter ${gameState.getCurrentChapter()}`);\n    }\n\n    // TODO: Initialize additional systems\n    // - Audio system\n    // - Input handling\n    // - Rendering system\n\n    console.log('🎯 Game systems initialized');\n  }\n\n  showGame() {\n    this.loadingScreen.style.display = 'none';\n    this.gameContainer.style.display = 'block';\n    this.isLoaded = true;\n\n    // Add a simple test interface for development\n    this.createTestInterface();\n  }\n\n  createTestInterface() {\n    const gameContainer = document.getElementById('game-container');\n    gameContainer.innerHTML = `\n      <div style=\"padding: 20px; color: white; font-family: Arial, sans-serif;\">\n        <h1>🎮 Gospel Game - Development Mode</h1>\n        <p>Welcome to the Gospel Game! This is the development interface.</p>\n        \n        <div style=\"margin: 20px 0;\">\n          <h3>Game State:</h3>\n          <p>Current Chapter: ${gameState.getCurrentChapter()}</p>\n          <p>Progress: ${gameState.getProgressPercentage()}%</p>\n          <p>Completed Chapters: ${gameState.playerProgress.completedChapters.length}</p>\n        </div>\n        \n        <div style=\"margin: 20px 0;\">\n          <h3>Development Tools:</h3>\n          <button onclick=\"window.runHelperTests()\" style=\"margin: 5px; padding: 10px; background: #4ecdc4; border: none; border-radius: 5px; color: white; cursor: pointer;\">\n            Run Helper Tests\n          </button>\n          <button onclick=\"gameState.completeChapter(${gameState.getCurrentChapter()})\" style=\"margin: 5px; padding: 10px; background: #45b7d1; border: none; border-radius: 5px; color: white; cursor: pointer;\">\n            Complete Current Chapter\n          </button>\n          <button onclick=\"gameState.setCurrentChapter(${gameState.getCurrentChapter() + 1})\" style=\"margin: 5px; padding: 10px; background: #96ceb4; border: none; border-radius: 5px; color: white; cursor: pointer;\">\n            Next Chapter\n          </button>\n          <button onclick=\"gameState.resetProgress()\" style=\"margin: 5px; padding: 10px; background: #ff6b6b; border: none; border-radius: 5px; color: white; cursor: pointer;\">\n            Reset Progress\n          </button>\n        </div>\n        \n        <div style=\"margin: 20px 0;\">\n          <h3>Console Output:</h3>\n          <div id=\"console-output\" style=\"background: #1a1a1a; padding: 10px; border-radius: 5px; font-family: monospace; font-size: 12px; max-height: 200px; overflow-y: auto;\">\n            Check the browser console for detailed output...\n          </div>\n        </div>\n      </div>\n    `;\n\n    // Make gameState available globally for testing\n    window.gameState = gameState;\n  }\n\n  showError(message) {\n    const loadingContent = this.loadingScreen.querySelector('.loading-content');\n    loadingContent.innerHTML = `\n      <h1>Gospel Game</h1>\n      <p style=\"color: #ff6b6b;\">${message}</p>\n      <button onclick=\"location.reload()\" style=\"margin-top: 20px; padding: 10px 20px; background: #4ecdc4; border: none; border-radius: 5px; color: white; cursor: pointer;\">\n        Try Again\n      </button>\n    `;\n  }\n}\n\n// Initialize game when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n  const game = new GameLoader();\n  game.init();\n});\n\n// Handle window errors\nwindow.addEventListener('error', event => {\n  console.error('Global error:', event.error);\n});\n\n// Handle unhandled promise rejections\nwindow.addEventListener('unhandledrejection', event => {\n  console.error('Unhandled promise rejection:', event.reason);\n});\n"],"names":["GameState","chapter","error","saved","data","newSettings","gameState","GameLoader","resolve","gameContainer","message","loadingContent","event"],"mappings":"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"}